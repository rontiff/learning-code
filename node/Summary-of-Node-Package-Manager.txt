
Summary of Node Package Manager:

1. create package.json
    npm init 
    npm init --yes

    package.json is a json file include some basic information about your application.such as name, version, authors, dependency etc

2. add third-party library 

    search for: https://www.npmjs.com/

    example: install package "underscore"

        npm i underscore
    
    2 things happen after npm i 
        1. at package.json show dependency of the package version
        2. the npm package will store at node_modules

3. use the third-party library 

    import the library in the javascript file. 
    Apply the method from the library. (need to read the document to use the library)

4. Package dependency

    the npm module can be dependence to other npm module, so the module can be a lot of things. 
    
    problem: npm package will install multiple times. 
    solution: if package using different version, node_modules will store separately. 

5. NPM Packages and source Control: 

    problem: if node_module is really big. really hard to export. 
    solution: create .gitignore--> node_modules/


6. Semantic Versioning

    Semantic Versioning = 0.0.0  (Major . Minor . Patch)

    look at dependency
        example: 
        "underscore": "^1.13.3"  (only version 1.X.X available)
        "underscore": "~1.13.3"  (only version 1.13.X available)
        "underscore": "1.13.3"   (exact version 1.13.3 available)



    the ^ means any version start from the Major version 1.X.X
    the ~ means any version start from the Major and Minor version 1.8.X
    to get exact version, remove the sign from the dependency. Example  "underscore": "1.13.3"


7. Listing the Installed Packages:

        1. terminal: npm list (easier to search)

8. Listing the Installed Packages dependencies: 

        1. terminal: npm view mongoose dependencies

9. Install Specific Version of Package:

        Example: mongoose version is 6.3.4, how to download version 6.2.1?

        1. npm install mongoose@6.2.1

10. Update local Package / Search outdated package

        1. terminal: npm outdated 

        2. terminal: npm update  (only minor and path will update, not major)

11. Package for developing tools dependencies:

        problem: we need package "jshint" for development, but not for production.

        solution: install the package outside of dependencies, install at dev-dependencies
        
        1. terminal: npm install jshint --save-dev

        look at package.json, should see devDependencis record separated from dependencies.

12. uninstall a package:

        1. terminal : npm uninstall mongoose
        2. terminal : npm un mongoose

